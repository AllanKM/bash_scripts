#!/usr/bin/perl
#
# CommandExit example for taking date-based WebSeal log filename
# and moving it to a node relative subdirectory (example: bynode/NODE)
# Success/Failure logged to stdout and syslog (daemon.notice)

eval 'exec /usr/bin/perl -wS $0 ${1+"$@"}'
            if $running_under_some_shell;

use strict;
use Getopt::Long;
use POSIX;
use Socket;
use Sys::Hostname;
use Sys::Syslog qw(:DEFAULT setlogsock);
use Time::Local;

umask 022;

$| = 1;

# Determine self identity
my $mylname = $0;
my $mysname = $mylname;
$mysname =~ s%^.*/%%;

# Determine who is running this
my ($realuser,$effuser);
($realuser) = getpwuid($<);
($effuser) = getpwuid($>);

# Where are we running from
my $tty;
$tty = ttyname(*STDIN);
$tty = "UNKNOWN" if ($? ne 0 || $tty eq '' || $tty =~ / /);

# Set defaults
my $mvcmd = "mv";
my $nodedir = "bynode/%s";
my $compresscmd = "/usr/bin/gzip";
my $compressargs = "-9";
my $compressflg = 0;

# Obtain arguments
my $rc = &main::GetOptions(
  # Script options
  'c|nocompress',
  'l|nosyslog',
  'n|nodedirectory:s',
);
if (! $rc) {
  usage($mysname);
  exit 1;
}

# Validate options

# Make sure nodedir is not fully-qualified
#  Should be relative for easier moving, if not crossing filesystems
#    Assuming no symlinks of one of these subdirs to another filesystem
if ($main::opt_n) {
  if ($main::opt_n !~ /^\//) {
    $nodedir = $main::opt_n;
  }
}

# Loop on filenames to process
my $mycwd = getcwd;
my $file;
foreach $file (@ARGV) {

  next if (! -e $file);

  # Fully qualify pathname of file
  $file = "$mycwd/$file" if ($file !~ /^\//);
  $file =~ s%\/\/%/%g;

  # Determine basename and dirname
  my $base = $file;
  $base =~ s%^.*/%%;
  my $dir = $file;
  $dir =~ s%\/$base$%%;
  if (! -d $dir) {
    logit($mysname,2,"Base directory \'%s\' not found for file \'$file\'",
          $dir,$file);
    next;
  }
  
  # Obtain ownership/permissions of main directory
  my($uid,$gid,$mode) = (stat($dir))[4,5,2];
  
  # Parse file name for node-based subdirectory
  # Assumes WebSeal format of NODE.LOGNAME.YYYY-mm-dd-HH-MM-SS.gz
  # NODE may/may not be a fully-qualified hostname and
  # LOGNAME may/may not contain more dots
  # ASSUMPTION: Non-fully-qualified hostname (ie. short host) is unique
  my ($node) = split(/\./,$base);

  # Create date-based subdirectory
  my $destdir = "$dir/$nodedir";
  $destdir = sprintf($destdir, $node);
  mkdirs($destdir,$uid,$gid,$mode);

  # Move the file to the dated directory
  my $rc = 0;
  if (-d $destdir) {
    rename($file,"$destdir/$base") ||
      system($mvcmd,$file,"$destdir/$base");
    $rc = $? >> 8;
    if ($rc != 0) {
      logit($mysname,2,"Unable to rename \'$file\' to \'$destdir/$base\'");
    } else {
      # Compress the file, unless the -c option is specified
      $compressflg = 0;
      if (! defined $main::opt_c &&
          -x $compresscmd &&
          $base !~ /\.(Z|gz|bz2)$/) {
        $compressflg = 1;
        system($compresscmd,$compressargs,"$destdir/$base");
        $rc = $? >> 8;
        if ($rc != 0) {
          logit($mysname,2,"Unable to compress \'$destdir/$base\'");
        }
      }
    }
  } else {
    logit($mysname,2,"Unable to create date directory \'$destdir\'");
  }

  # Log success/failure to syslog
  my $out = "";
  $out = "User: $realuser";
  $out .= "($effuser)" if ($realuser ne $effuser);
  $out .= " TTY: $tty";
  $out .= " Compress: ".($compressflg ? "Y" : "N");
  $out .= " Move: $file \=\> $destdir/$base";
  if ($rc == 0) {
    $out .= " succeeded";
  } else {
    $out .= " failed";
  }
  if ($main::opt_l) {
    logit($mysname,1,$out);
  } else {
    logit($mysname,9,"daemon","notice",$out);
  }
}

exit 0;

sub usage {
  my($me) = @_;

  print "$me [-c][-l][-n nodedir] filename [filename ...]\n",
        "  where: filename - full path to log file\n",
        "         nodedir  - node subdirectory format (default: bynode/\%s)\n",
        "         -c       - do not compress the log file\n",
        "         -l       - do not log to syslog\n";
}

sub logit {
  my($me,$logtype,@logargs) = @_;
  my($logopt) = "ndelay,pid";
  #my($date) = POSIX::strftime("%b %d %T",localtime());
  my($date) = POSIX::strftime("%Y/%m/%d %H:%M:%S",localtime());
  my($facility,$priority);
  my %logtypes = (
    "none"   => 0,
    "stdout" => 1,
    "stderr" => 2,
    "outerr" => 4,
    "syslog" => 8,
  );
  my($dfltlogtype) = $logtypes{"stdout"};

  $logtype = $dfltlogtype if ($logtype <= 0);

  # Split out arguments based on log type
  if ($logtype & $logtypes{"syslog"}) {
    ($facility,$priority,@logargs) = @logargs;
  }
  my($format,@myargs) = @logargs;

  # Handle syslog
  if ($logtype & $logtypes{"syslog"}) {
    setlogsock("unix");
    if (defined openlog($me,$logopt,$facility)) {
      if (@myargs) {
        syslog($priority,$format,@myargs);
      } else {
        syslog($priority,$format);
      }
      closelog();
    } else {
      setlogsock("inet");
      if (defined openlog($me,$logopt,$facility)) {
        if (@myargs) {
          syslog($priority,$format,@myargs);
        } else {
          syslog($priority,$format);
        }
        closelog();
      } else {
        # Assume failure requires further processing
        # by incorporating the default log type
        $logtype |= $dfltlogtype;
      }
    }
  }

  # Handle STDERR
  if ($logtype & $logtypes{"stderr"} || $logtype & $logtypes{"outerr"}) {
    if (@myargs) {
      printf STDERR "$date $me\[$$\]: $format\n", @myargs;
    } else {
      print STDERR "$date $me\[$$\]: $format\n";
    }
  }

  # Handle STDOUT
  if ($logtype & $logtypes{"stdout"} || $logtype & $logtypes{"outerr"}) {
    if (@myargs) {
      printf STDOUT "$date $me\[$$\]: $format\n", @myargs;
    } else {
      print STDOUT "$date $me\[$$\]: $format\n";
    }
  }
}

sub mkdirs {
  my($dir,$uid,$gid,$perms) = @_;
  my($d,$subdir);
  return if ($dir !~ /^\//);
  $dir =~ s%//%/%g;
  $dir =~ s%^/%%g;
  $subdir = "";
  foreach $d (split('/',$dir)) {
    $subdir .= "/$d";
    next if (-d $subdir);
    mkdir($subdir,$perms);
    chown($uid,$gid,$subdir);
  }
}

print "$main::running_under_some_shell\n";
print "$main::opt_c\n";
print "$main::opt_l\n";
print "$main::opt_n\n";
