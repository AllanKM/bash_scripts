#!/bin/bash
# Post WAS install configuration for TIP systems 
# Usage: tip_postinstall_was_v2.sh VERSION [-washome $washome] [-user $user]
#                        [-heap $min $max] [-debug] [-shareclasses_none]
#   Arguments:  
#           -washome $washome  WebSphere home directory      
#           -user $user        Execution userid used to execute commands . 
#                               Default:  webinst, unless NCO, where default is netcool  
#           -heap $min $max    Update min/max heap - Default - no update 
#   Description:
#     Optionally updates heap size with values supplied 
#        -heap $MIN $MAX
#     Optionally sets JVM argument -Xshareclasses:none
#        -shareclasses_none
#     Sets WAS System log retention/rotation (not optional)  
#         14 days backup, 24 hour rollover period 
#     Installs the EI logrotate config for WAS logs at /logs/was70
#     Does not set RunAs
#     Starts the server if it is not running.
#   Example:
#      WASHOME=/opt/IBM/Netcool/tip
#      cd /lfs/system/tools/tip/setup
#      sudo  ./tip_postinstall_was_v2.sh 70  -washome $WASHOME -heap 128 256 
#
#   
#   Change History: 
#     Lou Amodeo    03-01-2013  Add support for Websphere 8.5 
#     E Coley       04-25-2013  Adjustments for TIP 
#     E Coley       06-16-2013  V2 for flexible TIP location and heap size,
#                               -Xshareclasses, log rollover in call to tip_server.py


HOST=`/bin/hostname -s`
FULLVERSION=${1:-70023}
VERSION=`echo $FULLVERSION | cut -c1-2`
PROFILE=TIPProfile
SERVER=server1

# Defaults are based on a standard EI-WAS used by TAD but not TCR or NCR
WAS_HOME=/usr/WebSphere70/AppServer
WASHOME_OVERRIDE="n"
WAS_PROFILE_HOME="${WAS_HOME}/profiles/${PROFILE}"

#WASLOGS=/logs/was$VERSION/TIPProfile
# Why would we need to change this?  It's a symlink 
WASLOGS=$WAS_PROFILE_HOME/logs

TIP_TOOLS=/lfs/system/tools/tip
TIPLIB=${TIP_TOOLS}/lib
SCRIPTS_HOME=/lfs/system/tools/was/scripts
WASLIB=/lfs/system/tools/was/lib
USER=webinst        # userid under which WAS runs 
WAS_NODE=TIPNode 
WAS_CELL=TIPCell
UPDATE_HEAP_SIZE="n"
HEAP_MIN=""         # No default 
HEAP_MAX="" 
HEAP=""             # Format is HEAP=heap:$HEAP_MIN/$HEAP_MAX
CONTINUE_PROMPTS="y"
DEBUG=""
STARTED_SERVER="n"
SHOW_JVM_MSGS="n"   # Display messages generated by Jython scripts
SET_SHARE_CLASSES_NONE="n"  # Can do this only once.. 
MODIFY_SERVER_ATTRIBUTES="n" 
UPDATE_LOG_ROLL="y" # Log rolloover 
LR_MAX_BACKUPS=14   
LR_ROLL_PERIOD=24

BYPASS_SST="n"      # Bypass flags for testing  
BYPASS_LOGR="n"
BYPASS_XSR="n"
BYPASS_HEAP="n" 
####################################
# Locate the other arguments
####################################
    i=0
    while [ $i -le $# ]; do
      i=$((i + 1))
      eval parm=\${$i:-}
      case "$parm" in
        -washome) 
           i=$((i + 1))
           eval WAS_HOME=\${$i:-}
           WASHOME_OVERRIDE="y"
           ;; 
        -user)           # for $USER 
           i=$((i + 1))
           eval USER=\${$i:-}
           ;;    
       -logdir|waslogs)
           i=$((i + 1))
           eval WASLOGS=\${$i:-}
           ;; 
       	-prompts|-pr)
           CONTINUE_PROMPTS="y"
           ;;   
       	-noprompts|-npr|-silent)
           CONTINUE_PROMPTS="n"
           ;; 
      	-heap)
      	   UPDATE_HEAP_SIZE="y"
      	   i=$((i + 1))
           eval HEAP_MIN=\${$i:-}
           i=$((i + 1))
           eval HEAP_MAX=\${$i:-}
           ;;  
        -shareclasses_none)   
           SET_SHARE_CLASSES_NONE="y"
           ;;  
        -modify_server_attrs|-server_attrs) 
           MODIFY_SERVER_ATTRIBUTES="y"
           i=$((i + 1))
           eval SERVER_ATTRIBUTES_CMD=\${$i:-}
           ;;    
        -debug)
           DEBUG=debug   
           ;; 
        -jvm_msgs)
           SHOW_JVM_MSGS="y"  
           ;; 
        -bypassSST|-bsst)
           BYPASS_SST="y"  
           ;; 
        -bypassLOGR|-blogr)
           BYPASS_LOGR="y"  
           ;;    
        -bypassXSR|-bxsr)
           BYPASS_XSR="y"  
           ;; 
        -bypassHEAP|-bheap)
           BYPASS_HEAP="y" 
           ;;                       
        *)
           ;;
      esac
    done

# Issue prompt before contunue 
prompt_to_continue() {
  if [ $CONTINUE_PROMPTS == "y" ]; then
    echo "Hit enter to continue, or cancel(CNTL-c) to quit"  
    read -r choice 
  fi  
}

#####################
# Examine the input 
#####################
#1. WAS home and profile home 
if [ $WASHOME_OVERRIDE == "y"  ]; then
    WAS_PROFILE_HOME="${WAS_HOME}/profiles/${PROFILE}"
    WASLOGS=$WAS_PROFILE_HOME/logs
fi
if [ ! -e $WAS_PROFILE_HOME ]; then
  echo "ERROR: WebSphere profile directory invalid: $WAS_PROFILE_HOME...terminating"
  exit 1
fi 
#2. wsadmin location  
WSADMIN=$WAS_PROFILE_HOME/bin/wsadmin.sh   
if [ ! -x $WSADMIN ]; then
    echo "Failed to locate $WAS_HOME/bin/wsadmin.sh ... exiting"
    exit 1
fi
#3. Support heap size adjustment  
if [ $UPDATE_HEAP_SIZE == "y" ]; then
    HEAP=heap:$HEAP_MIN/$HEAP_MAX    
fi  

#3. If NCO, the default user/group changes to "netcool/itmusers" 
was_home_is_nco=$(echo $WAS_HOME | tr '[:upper:]' '[:lower:]'   |  grep 'netcool' )
if [ $? -eq 0 ]; then 
    USER=netcool
fi
#4. Display Jython script messages
if [ "$DEBUG" != "" ]; then
    SHOW_JVM_MSGS="y"  
    echo "Displaying JVM output from Jython scripts"
fi            
#
# Confirm input before continuing 
#
  echo version 100
  echo "*************** "
  echo "Confirm input:  "
  echo "*************** "
  echo "..WebSphere home(-washome): $WAS_HOME"
  
  echo "..WAS profile home:         $WAS_PROFILE_HOME"   
  echo "..User(-user):              $USER" 
  if [ $UPDATE_HEAP_SIZE == "y" ]; then
    echo "..Update heap size(-heap(:  $UPDATE_HEAP_SIZE"
    echo "...Heap min/max:            $HEAP_MIN/$HEAP_MAX"    
  fi 
  if [ $SET_SHARE_CLASSES_NONE == "y" ]; then
    echo "..Set -Xshareclasses:none:  $SET_SHARE_CLASSES_NONE" 
  fi
  if [ $MODIFY_SERVER_ATTRIBUTES == "y" ]; then
    echo "..Modify server attributes: $MODIFY_SERVER_ATTRIBUTES"
    echo "                            $SERVER_ATTRIBUTES_CMD"       
  fi  
  echo "..Update sys log rollover:  $UPDATE_LOG_ROLL"
  echo "...max backups:             $LR_MAX_BACKUPS" 
  echo "...roll period:             $LR_ROLL_PERIOD"  
  echo "..Log directory(-logdir):   $WASLOGS"
  echo "..DEBUG:                    $DEBUG"
  echo "..Show JVM mgs:             $SHOW_JVM_MSGS" 
  echo  
  
prompt_to_continue

############################### 
# Start server if not running   
###############################
if [ $BYPASS_SST == "n" ]; then
  echo "Checking status of $SERVER ..."
  STATUS_CMD="$WAS_PROFILE_HOME/bin/serverStatus.sh server1"
  [ -n "$DEBUG" ] && echo "STATUS_CMD=$STATUS_CMD"
  adminStatus=$($STATUS_CMD | tail -1 | grep STARTED)
  if [[ -z $adminStatus ]]; then
	  echo "..Server is not running... Starting server1..."
	  STARTSERVER="startServer.sh server1"
    #result=$(su - $USER -c "$WAS_PROFILE_HOME/bin/$STARTSERVER")
    # I want to see the details...  
    su - $USER -c "$WAS_PROFILE_HOME/bin/$STARTSERVER"
    #[ -n "$DEBUG" ] && echo "result: $result"
    STARTED_SERVER='y'  
  else
    echo "..Server is running"      
  fi
fi

#################################################
# Call wsadmin several times to perform the work
#################################################
JVM_OUTPUT_DIRECTIVE=" >/dev/null"
if [ $SHOW_JVM_MSGS == "y" ]; then
  JVM_OUTPUT_DIRECTIVE=""  
fi   
   
# 1. Update min/max heap sizes to values specified in $HEAP
if [  $UPDATE_HEAP_SIZE == "y" ]; then
  if [[ -e $WASLIB/server.py ]]; then
    echo "Updating min/max heap sizes for $SERVER ...."
	  LOGGING="-tracefile $WASLOGS/wsadmin.${SERVER}-heap.traceout"
	  HEAP_CMD="$WSADMIN $LOGGING -f $WASLIB/server.py  -action modify -server $SERVER -attr $HEAP"
	  [ -n "$DEBUG" ] && echo "  HEAP_CMD=\"$HEAP_CMD\""
 	  #su - $USER -c "$WSADMIN $LOGGING -f $WASLIB/server.py  -action modify -server $SERVER -attr $HEAP" $JVM_OUTPUT_DIRECTIVE
 	  if [ $BYPASS_HEAP == "n" ]; then
 	    su - $USER -c "$HEAP_CMD" $JVM_OUTPUT_DIRECTIVE
   	  if [ $? -ne 0 ];  then
     	    echo "  ERROR: Failed to set min/max heap sizes ... exiting"
    	    exit 1
    	else
    	  echo "Update completed."    
      fi
    else
      echo "  set heap size bypassed on request"
    fi     
  else
    echo "ERROR - script not located: $WASLIB/server.py "
  fi
else
    echo "No updates to min/max heap sizes requested"
fi
echo
prompt_to_continue

# 2. Set -Xshareclasses:none  optional 
# We should be using the more generic call to server.py 
if [ $SET_SHARE_CLASSES_NONE == "y" ]; then
  echo "Setting \-Xshareclasses:none ? "
  make_the_update="y"
  # scan server.sml to see if it is already set...
  SERVER_XML_LOC=$WAS_PROFILE_HOME/config/cells/TIPCell/nodes/TIPNode/servers/server1/server.xml
  #echo $SERVER_XML_LOC | grep 'genericJvmArguments' | grep '-Xshareclasses:none' > /dev/null
  line=$(grep 'genericJvmArguments'  $SERVER_XML_LOC)    
  arg_line=$(echo $line | grep 'Xshareclasses:none') # > /dev/null)
  #echo  "line is $arg_line"
  #if [ $? -ne 0 ];  then 
  if [ "$arg_line" != "" ];  then 
      echo
      echo "It appears this jvm argument has already been set"   
      echo "Are you sure you want to set it again? If so enter \"y\"" 
      read -r choice 
      #TODO - improve this
      echo "... you entered $choice"
      if [ $choice !=  "y" ]; then  
        make_the_update="n" 
      fi
  fi
  if [ $make_the_update == "y" ]; then 
    LOGGING="-tracefile $WASLOGS/wsadmin.${SERVER}-shareclasses.traceout"
	  SHRC_ARG="genarg:-Xshareclasses:none"
	  XSHR_CMD="$WSADMIN $LOGGING -f $WASLIB/server.py  -action modify -server $SERVER -attr $SHRC_ARG" 
	  [ -n "$DEBUG" ] && echo "  XSHR_CMD=\"$XSHR_CMD\""
	  if [ $BYPASS_XSR="n" ]; then
	    su - $USER -c "$XSHR_CMD" $JVM_OUTPUT_DIRECTIVE
 	    if [ $? -ne 0 ];  then
   	    echo "Failed to update  ... exiting"
  	    exit 1
    	else
        echo "Update completed."   
      fi
    else
      echo "  Update -Xshareclasses:none bypassed on request"
    fi     
  fi
  prompt_to_continue
else
  echo "No setting of -Xshareclasses:none requested"
fi  
echo

# 3. Set System log retention/rotation - not optional  
# Setting RunAs is now done in tip_was_securityConfig_vx.py 
# Note - the 'node' -type argument specifies server name 
LR_MAX_BACKUPS=14
LR_ROLL_PERIOD=24
LR_ATTRS="log_roll:$LR_MAX_BACKUPS/$LR_ROLL_PERIOD"
if [ $UPDATE_LOG_ROLL == "y" ]; then
  if [[ -e $TIPLIB/tip_server.py ]]; then
    echo "Setting WAS system log rollover/rotation..."
	  LOGGING="-tracefile $WASLOGS/wsadmin.${SERVER}-log_roll.traceout"
 	  #  wsadmin -lang jython -f server.py -action modify -server <serverName>  -attr log_roll:14/24'   [-node <nodeName>]'
 	  LOG_ROLL_CMD="$WSADMIN $LOGGING -f $TIPLIB/tip_server.py  -action modify -server $SERVER -attr $LR_ATTRS"
 	  [ -n "$DEBUG" ] && echo "LOG_ROLL_CMD=\"$LOG_ROLL_CMD\""
    if [ $BYPASS_LOGR == "n" ]; then
 	    su - $USER -c "$LOG_ROLL_CMD" $JVM_OUTPUT_DIRECTIVE
   	  if [ $? -ne 0 ];  then
     	  echo "  ERROR: Failed to set system log backup and roll attributes... exiting"
    	  exit 1
    	else
        echo "Update completed."   
      fi  
    else
      echo "  set log retention/rotation  bypassed on request"
    fi       
  else
     echo "WARNING: Script tip_server.py has not been installed.. Log backup/rotation bypassed"         
  fi
  echo
  prompt_to_continue   
else
    echo "Update WAS log backup/rotation bypassed"      
fi

# 4. Setup WAS TSM backup
echo
echo "TSM backup for WAS .... Deferred "
#	/lfs/system/tools/was/setup/setup_tsm_backup.sh $VERSION $PROFILE
## TSM backups now, no more config zips that would overlap


# 5  Setup WAS logrotate
echo
echo "Installing the logrotate configuration for WAS logs at /logs/was70"
INSTALL_LOG_ROTATE_CMD=/lfs/system/tools/was/setup/install_was_logrotate.sh
[ -n "$DEBUG" ] && echo "INSTALL_LOG_ROTATE_CMD=$INSTALL_LOG_ROTATE_CMD"
$INSTALL_LOG_ROTATE_CMD

# 6. Restart message
echo
echo "Restart the WAS server1 for changes to take effect"
